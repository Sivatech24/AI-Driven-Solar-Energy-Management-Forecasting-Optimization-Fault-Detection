# -*- coding: utf-8 -*-
"""SolarPlant

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hrrP5wmUy9tmntOJ1G5_9zLlNL6z03lL

# Steps to Build a Neural Network for Solar Energy Forecasting

# 1. Install Dependencies
Ensure you have TensorFlow installed:
"""

pip install tensorflow numpy pandas matplotlib scikit-learn

"""# 2. Import Libraries"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# 3. Load and Preprocess Solar Energy Data
You'll need historical solar energy production data. Let's assume you have a CSV file with:

Input features: Temperature, Solar Radiation, Cloud Cover, Humidity, Wind Speed
Target variable: Solar Power Output
"""

# https://www.nrel.gov/grid/solar-power-data.html

# Load dataset
df = pd.read_csv("/content/powerconsumption.csv")

# Inspect the data
print(df.head())

# Define features (X) and target variable (y)
X = df[['Temperature', 'Humidity', 'WindSpeed', 'GeneralDiffuseFlows', 'DiffuseFlows']]
y = df[['PowerConsumption_Zone1', 'PowerConsumption_Zone2', 'PowerConsumption_Zone3']].sum(axis=1)  # Adjust as needed

# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""# 4. Define the Neural Network
A fully connected feedforward neural network works well for time series prediction.
"""

# Define the model
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.2),  # Prevent overfitting
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1)  # Single output (predicted solar power)
])

# Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

"""# 5. Train the Model"""

history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2)

"""# 6. Evaluate the Model"""

loss, mae = model.evaluate(X_test, y_test)
print(f"Mean Absolute Error: {mae}")

# Plot training loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.show()

"""# 7. Make Predictions"""

predictions = model.predict(X_test)

# Compare actual vs predicted
plt.scatter(y_test, predictions)
plt.xlabel("Actual Solar Power Output")
plt.ylabel("Predicted Output")
plt.show()